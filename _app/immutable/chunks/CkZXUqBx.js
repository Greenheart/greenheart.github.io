import"./DsnmJJEf.js";import"./HzuPKAlg.js";import{f as L,a as o,s,c as l,A as e,B as p,r as t}from"./B2YQBVX4.js";import{L as r}from"./qMC3yWpg.js";import{C as i}from"./DToV4MWq.js";const M="locale-selector",T={title:"Making a Locale Selector with Many Options Accessible and Easy to Use",date:"2025-09-06",tags:["Accessibility","HTML","JavaScript"],featured:!0,draft:!0},{title:z,date:q,tags:I,featured:O,draft:W}=T,U=[{level:2,title:"Make the component accessible",id:"make-the-component-accessible"},{level:2,title:"Sorting: Show recommended locales at the top, followed by all options sorted alphabetically",id:"sorting-show-recommended-locales-at-the-top-followed-by-all-options-sorted-alphabetically"},{level:3,title:"Recommended locales part 1: Matching the user's preferred locales",id:"recommended-locales-part-1-matching-the-users-preferred-locales"},{level:3,title:"Recommended locales part 2: Combining with the most common languages",id:"recommended-locales-part-2-combining-with-the-most-common-languages"},{level:3,title:"Recommended locales: Putting it all together",id:"recommended-locales-putting-it-all-together"},{level:2,title:"Bonus: Add support for server side rendering",id:"bonus-add-support-for-server-side-rendering"},{level:2,title:"Important UX improvements for long lists: Search and typeahead",id:"important-ux-improvements-for-long-lists-search-and-typeahead"},{level:2,title:"Conclusion",id:"conclusion"}];var S=L(`<article><p>The locale selector is an important part of any multilingual app or website. Let's explore how to make this component accessible and easy to use - especially when there are many options to choose from.</p><p>This article is written in a framework-agnostic way, since these principles and techniques are very similar for most web-based projects. Starting with the simple techniques that give a high impact for usability while being quick to implement, and later moving on to more advanced features.</p><blockquote><p>Note: Even though locale selector is the technically correct term when you support multiple language variants (locales) like (<code>pt-BR</code> and <code>pt</code>), this component is also commonly known as a language picker or language selector. These terms are mostly interchangeable from a developer perspective, though people using these components generally prefer the term "language" over "locale".</p></blockquote><p>If you only need to support a few (less than 5) locales, you can use a very simple component where users make their selection in as few steps as possible. For example by clicking a button to open a dropdown menu where the locales can be selected.</p><p>However, if you're building an app or website that supports more than 10 locales, then you might need something more advanced. The longer the list of options you show to the user, the bigger the responsibility you have to make the locale selector easy to use.</p><h2>Make the component accessible</h2><p>Accessibility should be your default when building any kind of user interface, and especially with a component like the locale selector which is critical in multilingual projects. Similar to other built-in HTML elements, the native <code>&lt;select&gt;</code> has several features that make it accessible and performant by default. However, since the <code>&lt;select&gt;</code> element up until very recently has lacked advanced styling options, it's usually replaced in favour of a custom component that can be styled to match your project needs.</p><p>In the future, once the <!> is supported in browsers, we can hopefully reduce the amount of JS required to create locale selectors that are accessible, performant and easy to use while still allowing custom styling.</p><p>Until then, we need to build custom locale selectors and test them properly to find and fix any accessibility issues. A good way to approach this is usually to build your project-specific components on top of unstyled, headless component libraries which implement good accessibility features and lets you focus on your project features.</p><h2>Sorting: Show recommended locales at the top, followed by all options sorted alphabetically</h2><p>If we think about the user perspective, an app or website that supports many (20+) locales might require quite a bit of scrolling (or at least visually skimming) through a long list of options before finding the desired locale. As developers and designers, we have a big opportunity to improve make this a smoother experience.</p><p>To start simple, we can greatly improve the experience by adding an option group with the recommended locales at the top, followed by all options sorted alphabetically. We will go through a detailed code sample implementing all of these ideas later, but for now let's start with how it works on a conceptual level:</p><p>Let's walk through how this works at a conceptual in</p><ol><li><p>Recommended locales:</p><ol><li>The User's preferred languages (supported by your project)</li><li>Most common languages (supported by your project)</li></ol></li><li><p>Available (alphabetically sorted):</p><ul><li>(...)</li></ul></li></ol><h3>Recommended locales part 1: Matching the user's preferred locales</h3><p>To make good recommendations, we can add the user's preferred languages at the very top. In the browser, these are available via the <code>navigator.languages</code> <!>. We'll cover server-side rendering support in a moment. The raw values from <code>navigator.languages</code> need to be matched against the supported locales in your project, which could look like this:</p><!><p>By checking for both exact matches and matching languages, we can make relevant recommendations. Let's see how it works in practice:</p><!><p>Executing the above example, we find a matching language for <code>en-GB</code> which adds <code>en</code> to the result, another matching language for the <code>pt</code> language code, adding <code>pt-BR</code>, and finally an exact match for <code>pt</code> which adds <code>pt</code>.</p><p>By including the similar variants, we can make good recommendations even if your project doesn't support the exact locale requested by the user, such as <code>en-GB</code>.</p><p>We can also make the full list of supported locales more intuitive to use by sorting the labels alphabetically with for example <!>.</p><h3>Recommended locales part 2: Combining with the most common languages</h3><p>Next up, let's add the <!> supported by your project. This is especially helpful in projects with a global audience, to make common languages easy to find, instead of only showing them further down in the list (when options are sorted alphabetically).</p><p>Finally, you filter the list of recommended locales to only keep the ones supported by your app or website.</p><!><p>It's also a good idea to only include every option once, for example by wrapping your recommended locales in a <!>.</p><!><p>This will prioritize the user's languages, since they are added to the <code>Set</code> before the most common languages, which won't get added if they are already included.</p><h3>Recommended locales: Putting it all together</h3><p>Here's the full implementation of <code>getPreferredLocales()</code>:</p><p>TODO: decide how to combine this function with getPreferredLocales() Probably we should call it getRecommendedLocales() all the time and just build it up piece by piece.</p><!><p>It's worth noting that locale support might be different in various parts of your project, if you for example have a large multilingual website with only partial translations. This is why we allow passing in the <code>supported</code> locales to allow the <code>getPreferredLocales()</code> function to be used in several kinds of projects.</p><p>Over the years, I have experimented with various ways to implement locale selectors and found that people using the software usually think this kind of solution with option grouping and sorting is a big improvement compared to a plain list of all options. Best of all, this is usually very quick to implement and creates a high positive impact for the people using your software. Especially if the locale options were not sorted alphabetically to start with.</p><p>TODO: Add the function for sorting and explain how it works.</p><h2>Bonus: Add support for server side rendering</h2><p>Reading <code>navigator.languages</code> works well on the client side, but means the component won't work for server side rendering.</p><p>If your app or website uses JavaScript-based server side rendering or static prerendering, you can further improve the locale selector by parsing the HTTP headers.</p><p>Support for server side rendering by reading the language preferences from the <!> HTTP header.</p><p>Keep the language picker component flexible - pass in preferred languages via props rather than accessing environment specific variables inside the component.</p><p>By passing in the user's preferred languages as an argument to <code>getRecommendLocales(userLanguages)</code>, we can easily use it both on the client and server side. By reusing the same function, we only have one function to test, and can have more specific tests that focus on the extraction of <code>navigator.languages</code> and the <code>Accept-Language</code> HTTP header.</p><p>TODO: Add code sample showing usage of the sorting function on both client and server</p><h2>Important UX improvements for long lists: Search and typeahead</h2><p>It's worth noting that the native <code>&lt;select&gt;</code> supports typeahead searching where the user can type a few letters in order to jump to the matching option. However, since language pickers are almost always built with custom components, this means we either have to re-implement that behaviour, or pick an underlying component library that includes support. Typing to select the matching option is a great feature for power users, but it's unfortunately hard to discover and learn how to use this feature. So adding things like a search field at the top of your language picker can make it much more intuitive and easier to use.</p><p>This is similar to how Wikipedia implemented their language selector, which makes sense since pages about common topics usually have more than 100 languages.</p><p>Adding search might be relevant for some use-cases. Though this is usually more JS, bigger bundle size and impact on load time. Might be worth keeping things simple unless you have 20+ languages. And even when you have numerous locales to support, it's still a tradeoff between performance and usability. For public websites where users might be expected to have a long session (or are visiting for the first time), it's less likely to be worth including the search/typeahead. However, for app-like experiences, or if the user already visited the website, then it could be more worth to have this feature in order to improve usability.</p><p>The performance tradeoff can be worked around by dynamically importing the search/typeahead feature. Especially if you let the main page load, and then load the picker either once the critical loading stopped, or even once the user begins interacting with the language picker component (hover/pointerdown or a later event). However, only loading the typeahead in some scenarios comes at the cost of increased code complexity. For example, requiring you to test more app states like when the search fails to load due to a network error. Will the core functionality (changing language) still work on an unstable/slow mobile network connection?</p><p>Minimizing complexity and possible app states are usually good ways to make projects easier (and cheaper) to maintain.</p><p>However, the user experience is more important - especially if you have many languages and expect longer user sessions. So please add the explicit search field if you think it would make the lives easier for the people using your software.</p><p>Organizing an event is nice.</p><h2>Conclusion</h2><p>I hope you've learned something useful about what makes a locale selector easy to use</p><p>This was a good way to summarize some quick thoughts about what makes a good locale selector, and how the meaning of "good language picker" varies depending on the requirements in your project.</p><p>Let me know if you have feedback and/or more tips for making accessible language pickers. Either write on (Mastodon/Fediverse)[TODO: link to post] or [email me](link to contact section). I'm looking forward to hearing your thoughts!</p></article>`);function J(w){var y=S(),B=s(l(y),7),v=s(l(B));r(v,{href:"https://developer.mozilla.org/en-US/docs/Learn_web_development/Extensions/Forms/Customizable_select",children:(a,c)=>{e();var n=p("customizable select");o(a,n)},$$slots:{default:!0}}),e(),t(B);var d=s(B,8),E=s(l(d),3);r(E,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Navigator/languages",children:(a,c)=>{e();var n=p("property");o(a,n)},$$slots:{default:!0}}),e(3),t(d);var m=s(d);i(m,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">function</span><span style="color:#61AFEF"> getPreferredLocales</span><span style="color:#ABB2BF">({</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic">    userLanguages</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75;font-style:italic">    supported</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">}: {</span></span>
<span class="line"><span style="color:#E06C75">    userLanguages</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF">[]</span></span>
<span class="line"><span style="color:#E06C75">    supported</span><span style="color:#ABB2BF">: { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF">; </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">string</span><span style="color:#ABB2BF"> }[]</span></span>
<span class="line"><span style="color:#ABB2BF">}) {</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> preferred</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">Locale</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">locale</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">of</span><span style="color:#E06C75"> supported</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Handle both exact matches and if only the language part before "-" matches</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span></span>
<span class="line"><span style="color:#E5C07B">            userLanguages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">some</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF">                (</span><span style="color:#E06C75;font-style:italic">lang</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=></span></span>
<span class="line"><span style="color:#E06C75">                    locale</span><span style="color:#56B6C2"> ===</span><span style="color:#E06C75"> lang</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> locale</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'-'</span><span style="color:#ABB2BF">)[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]),</span></span>
<span class="line"><span style="color:#ABB2BF">            )</span></span>
<span class="line"><span style="color:#ABB2BF">        ) {</span></span>
<span class="line"><span style="color:#E5C07B">            preferred</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">push</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var f=s(m,2);i(f,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/** All locales supported by this project, sorted alphabetically by the label */</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> supported</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'de'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'Deutsch'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'en'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'English'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'es'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'Español'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'pt-BR'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'Português (Brazil)'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'pt'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'Português'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'ja'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'日本語'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">    { </span><span style="color:#E06C75">locale</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'zh-CN'</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'简体中文'</span><span style="color:#ABB2BF"> },</span></span>
<span class="line"><span style="color:#ABB2BF">].</span><span style="color:#61AFEF">sort</span><span style="color:#ABB2BF">((</span><span style="color:#E06C75;font-style:italic">a</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">b</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=></span><span style="color:#E5C07B"> a</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">label</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">localeCompare</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">b</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">label</span><span style="color:#ABB2BF">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> userPreferred</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> getPreferredLocales</span><span style="color:#ABB2BF">({</span></span>
<span class="line"><span style="color:#E06C75">    userLanguages</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">navigator</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">languages</span><span style="color:#ABB2BF">, </span><span style="color:#7F848E;font-style:italic">// ['en-GB', 'pt']</span></span>
<span class="line"><span style="color:#E06C75">    supported</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E5C07B">console</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">log</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">userPreferred</span><span style="color:#ABB2BF">) </span><span style="color:#7F848E;font-style:italic">// result: ['en', 'pt-BR', 'pt']</span></span>
<span class="line"></span></code></pre>`});var h=s(f,3),k=s(l(h));r(k,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare",children:(a,c)=>{e();var n=p("localeCompare()");o(a,n)},$$slots:{default:!0}}),e(),t(h);var u=s(h,2),D=s(l(u));r(D,{href:"https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers",children:(a,c)=>{e();var n=p("most common languages");o(a,n)},$$slots:{default:!0}}),e(),t(u);var F=s(u,2);i(F,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">/**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * The most common languages supported by this project.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> * [Source](https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic"> */</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> mostCommonLanguages</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span></span>
<span class="line"><span style="color:#98C379">    'en'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'zh-CN'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'es'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'fr'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'pt-BR'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'pt'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'de'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">    'ja'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">]</span></span>
<span class="line"></span></code></pre>`});var g=s(F),_=s(l(g));r(_,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",children:(a,c)=>{e();var n=p("Set");o(a,n)},$$slots:{default:!0}}),e(),t(g);var A=s(g);i(A,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> unique</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Set</span><span style="color:#ABB2BF">([...</span><span style="color:#E06C75">userPreferred</span><span style="color:#ABB2BF">, ...</span><span style="color:#E06C75">mostCommonLanguages</span><span style="color:#ABB2BF">])</span></span>
<span class="line"></span></code></pre>`});var b=s(A,5);i(b,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">function</span><span style="color:#61AFEF"> getRecommendedLocales</span><span style="color:#ABB2BF">() {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    /**</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * The most common languages supported by this project.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     * [Source](https://en.wikipedia.org/wiki/List_of_languages_by_total_number_of_speakers)</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">     */</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> mostCommonLanguages</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> [</span></span>
<span class="line"><span style="color:#98C379">        'en'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'zh-CN'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'es'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'fr'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'pt-BR'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'pt'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'de'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#98C379">        'ja'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#ABB2BF">    ]</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#56B6C2">!</span><span style="color:#E06C75">browser</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">return</span><span style="color:#E06C75"> mostCommonLanguages</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> preferred</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">Locale</span><span style="color:#ABB2BF">[] </span><span style="color:#56B6C2">=</span><span style="color:#ABB2BF"> []</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    for</span><span style="color:#ABB2BF"> (</span><span style="color:#C678DD">const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">value</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">of</span><span style="color:#E06C75"> locales</span><span style="color:#ABB2BF">) {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Handle both exact matches and if only the language matches</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span></span>
<span class="line"><span style="color:#E5C07B">            navigator</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">languages</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">some</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF">                (</span><span style="color:#E06C75;font-style:italic">lang</span><span style="color:#ABB2BF">) </span><span style="color:#C678DD">=></span></span>
<span class="line"><span style="color:#E06C75">                    value</span><span style="color:#56B6C2"> ===</span><span style="color:#E06C75"> lang</span><span style="color:#56B6C2"> ||</span><span style="color:#E5C07B"> value</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">startsWith</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">lang</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">split</span><span style="color:#ABB2BF">(</span><span style="color:#98C379">'-'</span><span style="color:#ABB2BF">)[</span><span style="color:#D19A66">0</span><span style="color:#ABB2BF">]),</span></span>
<span class="line"><span style="color:#ABB2BF">            )</span></span>
<span class="line"><span style="color:#ABB2BF">        ) {</span></span>
<span class="line"><span style="color:#E5C07B">            preferred</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">push</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">value</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // Only include one entry for each recommended locale,</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">    // showing the user's preferred locales at the top.</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#E5C07B"> Array</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">from</span><span style="color:#ABB2BF">(</span><span style="color:#C678DD">new</span><span style="color:#61AFEF"> Set</span><span style="color:#ABB2BF">([...</span><span style="color:#E06C75">preferred</span><span style="color:#ABB2BF">, ...</span><span style="color:#E06C75">mostCommonLanguages</span><span style="color:#ABB2BF">]))</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var C=s(b,7),x=s(l(C));r(x,{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Accept-Language",children:(a,c)=>{e();var n=p("Accept-Language");o(a,n)},$$slots:{default:!0}}),e(),t(C),e(15),t(y),o(w,y)}export{J as default,T as frontmatter,U as headings,M as slug};
