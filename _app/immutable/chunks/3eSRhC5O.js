import"./DsnmJJEf.js";import"./HzuPKAlg.js";import{f as ue,a as o,s as t,c as p,A as a,B as n,r as i}from"./B2YQBVX4.js";import{L as l}from"./qMC3yWpg.js";import{C as c}from"./DToV4MWq.js";const Ae="keystatic-sveltekit-markdoc",Be={title:"Integrate Keystatic CMS with SvelteKit to render Markdoc Content with Interactive Svelte Components",date:"2025-09-08",tags:["SvelteKit","TypeScript","Keystatic CMS"],featured:!0,draft:!0},{title:Ce,date:we,tags:Fe,featured:De,draft:Ke}=Be,Ee=[{level:2,title:"Part 1: Why use a Git-based CMS like Keystatic?",id:"part-1-why-use-a-git-based-cms-like-keystatic"},{level:3,title:"When to use a Git-based CMS like Keystatic:",id:"when-to-use-a-git-based-cms-like-keystatic"},{level:3,title:"When to look for other CMS solutions:",id:"when-to-look-for-other-cms-solutions"},{level:2,title:"Part 2: How to Integrate Keystatic CMS with SvelteKit",id:"part-2-how-to-integrate-keystatic-cms-with-sveltekit"},{level:3,title:"Backend: Serving the Keystatic API inside your SvelteKit app",id:"backend-serving-the-keystatic-api-inside-your-sveltekit-app"},{level:3,title:"Registering the Keystatic API route in ",id:"registering-the-keystatic-api-route-in"},{level:3,title:"Frontend: Serving the Keystatic SPA within your SvelteKit project",id:"frontend-serving-the-keystatic-spa-within-your-sveltekit-project"},{level:3,title:"1. Register SPA and API routes from a SvelteKit plugin",id:"1-register-spa-and-api-routes-from-a-sveltekit-plugin"},{level:3,title:"2. Build the Keystatic SPA separately and serve it as static assets",id:"2-build-the-keystatic-spa-separately-and-serve-it-as-static-assets"},{level:3,title:"3. Add a ",id:"3-add-a"},{level:2,title:"Part 3: How to render Markdoc content with interactive Svelte components",id:"part-3-how-to-render-markdoc-content-with-interactive-svelte-components"},{level:2,title:"Future improvements: official Keystatic integration, easier project setup",id:"future-improvements-official-keystatic-integration-easier-project-setup"},{level:2,title:"Closing thoughts",id:"closing-thoughts"}];var ve=ue("<article><p>Have you ever worked on a <!> project where you want to use the Git-based <!>? Up until now that has usually meant installing a separate web framework like Astro/Remix/Next.js just to run the CMS, which might not always be desirable.</p><p>After some experimentation though, I found that it's actually possible to use Keystatic directly in your SvelteKit project! This makes it possible to use the same dev server and, if you want, the same production server.</p><p>You can even combine Keystatic with <!> to make your SvelteKit project render Markdoc content with custom formatting, interactive Svelte components and use other <!> of Markdoc.</p><p>In combination, this gives you a solid foundation to build almost any kind of app or website where you want to make content editing accessible to your entire team via Keystatic CMS.</p><p><strong>Quick start: Check out the <!> repository if you want the simplest way to add Keystatic to your SvelteKit project.</strong></p><p>If you also want to understand <em>when</em> to use this setup as well as <em>why</em> and <em>how</em> I designed it the way I did - then you've come to the right place! :)</p><hr/><h2>Part 1: Why use a Git-based CMS like Keystatic?</h2><p>Most mobile apps, web apps and websites don't need a complex backend or even a database. Instead, you can use a Git-based CMS like Keystatic to store content together with your code. This simplifies your tech stack, reduces hosting costs and can help you increase the security of your system.</p><p>Keystatic CMS allows non-technical people to use a graphical, web-based interface to make content changes that automatically syncs with your Git repository in the background.</p><h3>When to use a Git-based CMS like Keystatic:</h3><ul><li>You can easily represent content as Markdown/Markdoc/JSON/YAML files, images and other static assets and doesn't need a backend server or database just to manage content.</li><li>You don't need a backend server or database at all.</li><li>You want to keep your project as simple and with as few moving pieces as possible.</li><li>You don't want to maintain Docker-containers for a traditional CMS or for its database, and you don't want to maintain any database backups, apart from your regular Git repository.</li><li>You want to be able to Git checkout any historical commit and automatically get the correct content, in the right format, matching the code implementation at the time. This allows you to quickly achieve what you want, instead of first having to find and restore an old DB backup - if it even still exists years later!</li><li>You want to keep hosting costs as low as possible for your web app, mobile app or website, for example by building static content and caching it via a CDN.</li></ul><h3>When to look for other CMS solutions:</h3><ul><li>You need a CMS that integrates with your existing backend system to read and modify custom data types.</li><li>You need complex content types that can't be represented as static files. You can achieve surprisingly much with <!> in Keystatic, especially if you add content build scripts that run together with your regular project build to verify content and transform it into the format used by your app or website (<!>). However, for more complex relationships and cascading updates for related entries, you might want to use another solution.</li><li>You are implementing e-commerce features, or similar cases where you need a server and database to keep track of the orders and products to for example prevent multiple people from ordering the final item.</li><li>If you are working on an open source project and want to allow anyone (not just trusted collaborators) to propose content changes that automatically gets submitted as pull requests to your project. In this case you need Open Authoring, currently an <!> for Keystatic but supported in other Git-based CMS:es like <!>.</li></ul><hr/><h2>Part 2: How to Integrate Keystatic CMS with SvelteKit</h2><p>I've worked on many projects where a Git-based CMS made development and content-collaboration straightforward and enjoyable. For example the multilingual mobile app <!>, the web app <!> and several websites. After using other Git-based CMS:es, I started using Keystatic CMS in 2023 and found it to be both reliable and of high quality. However, Keystatic only had official support for Astro so far.</p><p>To use Keystatic in SvelteKit projects, one usually had to create a separate Astro project just to serve the CMS. While keeping the Keystatic entirely separate from the SvelteKit app or website might be desirable in some cases, there are also many situations where it's convenient and preferable to only have one Vite dev server, and only deploy one SvelteKit app for production.</p><p>After thinking about this in several projects, I finally came around to implement a solution that became <!>.</p><p>Thanks to the fact that Keystatic is built to be framework-agnostic, this was a lot simpler than expected. And it works surprisingly well!</p><p>Keystatic consists of two parts:</p><ol><li>Backend: A generic API endpoint where you can pass in a standard <!> object and get back a response with <code>&lcub; body, headers, status, statusText &rcub;</code> which you then can use to send back a standard <!>. Keystatic implements a monolithic API endpoint where the entire backend in one function that handles routing internally. This, together with it's standards-compatible input and output allows it to be framework-agnostic - as long as you expose it at the route <code>/api/keystatic/[...rest]</code></li><li>Frontend: A React-based SPA that only renders on the client side. Similarly to how the API is hardcoded to be served from <code>/api/keystatic/[...rest]</code>, the frontend expects to be served from <code>/keystatic/[...rest]</code>.</li></ol><h3>Backend: Serving the Keystatic API inside your SvelteKit app</h3><p>Keystatic exports the <code>makeGenericAPIRouteHandler</code> function that can be called with a <!> to create the API route handler. To make this available in SvelteKit, we can export a <!> API endpoint to handle all incoming requests to this route, no matter which HTTP verb the requests use.</p><p>Since Keystatic expects the API endpoints to exist at <code>/api/keystatic/*</code>, we need to create a SvelteKit API endpoint in the file <code>routes/api/keystatic/[...rest]/+server.ts</code></p><p>This is what it looks like:</p><!><p>This works, but it's quite a lot of directories and code to keep around in your projects. On top of that, we need to duplicate this code in all projects and update it everywhere if the Keystatic API changes. It seems like the <code>makeGenericAPIRouteHandler</code> is designed with a good public API, but you never know if things need to change in the future. In those cases it can be good to find a more minimal solution that doesn't require as many changes to your SvelteKit projects.</p><p>Luckily, there is a better way!</p><h3>Registering the Keystatic API route in <code>hooks.server.ts</code></h3><p>Instead of creating the <code>routes/api/keystatic/[...rest]/+server.ts</code> file, we can register the API route via the <!> hook in <code>hooks.server.ts</code>. Since it responds to all incoming requests, we need to check the URL to only handle the relevant requests, but apart from that we can use the same implementation.</p><!><p>By wrapping the Keystatic-related code in a function and moving it to <code>lib/keystatic/index.ts</code>, we make it easier to read <code>hooks.server.ts</code> by not having to think about how the Keystatic API works internally. By using smaller, separate hooks, it also gets easier to compose them with <!>.</p><!><p>And <code>handleKeystaticAPI</code> is implemented as follows in <code>lib/keystatic/index.ts</code>:</p><!><p>We now have a working Keystatic API!</p><p>TODO: MAybe move this section little bit further down?</p><p>Looking to the future, this might get even simpler if we could register routes programmatically from a SvelteKit plugin. There is an open <!>, so let's see what the future brings. For now, registering the API route via the <code>handle</code> hook is a good workaround. However, the frontend there are no great workarounds at the moment.</p><hr/><h3>Frontend: Serving the Keystatic SPA within your SvelteKit project</h3><p>First, we need some way to render a React SPA on a specific route within a SvelteKit application. To render React code within Svelte, <!> works great. However, the tricky part is registering the route for the Keystatic CMS frontend within SvelteKit.</p><p>I've explored several approaches, and similarly to how we walked through the alternatives for the Keystatic API route, here's a similar overview of how to register the Keystatic SPA route:</p><h3>1. Register SPA and API routes from a SvelteKit plugin</h3><p>If SvelteKit plugins can get the ability to programmatically register both API routes and</p><p>TODO: simplify this and adjust to the fact that registering SvelteKit routes might be possible without even requiring usage of the <code>handle</code> hook in <code>hooks.server.ts</code>. Ideally the library should just be able to register routes automatically in the background, and you just have to pass in your <code>keystatic.config.ts</code>.</p><p>The ideal approach would be to dynamically register both the Keystatic SPA and API routes at the same time within a SvelteKit <!> hook. However, since <!> in September 2025, we have to find other solutions.</p><p>Once this becomes possible, integrating Keystatic into your SvelteKit project could look like this:</p><!><p>Or if you have multiple hooks:</p><!><p>To make this possible, it would be great to allow registering routes similarly to how it works in Astro. I imagine the implementation of the SvelteKit version of <code>handleKeystatic()</code> could be very similar to the Keystatic integration for Astro: <!>.</p><h3>2. Build the Keystatic SPA separately and serve it as static assets</h3><p>The Keystatic SPA can be rendered in multiple ways. Either pre-bundle it as a React SPA and let SvelteKit serve it from the <code>/static</code> assets. However, this would require a separate Vite config, setting the correct base path - and most importantly - making sure to update the app whenever the version of <code>@keystatic/core</code> changes. This might result in better performance since all assets can be statically pre-built and served directly from the CDN. However, a big potential issue is that the Keystatic SPA might get outdated, and/or use a different version compared to the Keystatic API which always imports directly from <code>@keystatic/core</code>.</p><p>Note that the Keystatic SPA needs to be served from the same domain as the API though.</p><h3>3. Add a <code>/keystatic</code> route to render the SPA</h3><p>Serving a React SPA within the SvelteKit app is quite hacky, we need to</p><p>We could create a route <code>/keystatic/[...rest]</code></p><p><code>(keystatic)/keystatic/[...rest]</code></p><p>TODO: Note that this needs to use a layout group if you want to separate styles from your main app.</p><p>TODO: Describe the settings that need to change in Vite</p><p>Not ideal, but it works quite well once you have set it up. You'll likely enjoy the editing experience, compared to how it would be to set up with a separate server. And we don't need to install another meta-framework like Astro when we already have SvelteKit.</p><p>To make the SPA work:</p><p>One weird behaviour of the Keystatic SPA is that it's forcibly redirecting to <code>127.0.0.1</code> when the CMS loads. There's probably a good reason for this, but it's not documented in the code or in the public docs. Until <!> gets resolved, the following workaround can be added to your <code>vite.config.ts</code>:</p><!><p>TODO: Describe why you might want to only enable Keystatic during development, and how it can be done. Check import.meta.env or <code>dev</code> from SvelteKit. However, if you want to make the CMS accessible to other people than developers, you need to enable Keystatic also in production.</p><hr/><h2>Part 3: How to render Markdoc content with interactive Svelte components</h2><h2>Future improvements: official Keystatic integration, easier project setup</h2><p>Thanks to the generic API handler, it's possible to integrate the Keystatic API with any basically any backend framework for Node.js/Deno/Bun. Now that we know this works for Astro, SvelteKit and Remix, it should also be possible to integrate Keystatic for other Vite-based frameworks. Rendering the React-based Keystatic frontend is the tricky part (for non-React-based frameworks), but definitely possible.</p><p>I considered if it would be worth creating a Vite plugin like <code>vite-plugin-keystatic</code> to support any Vite-based meta-framework like SvelteKit, Astro, Remix and more. However, since the routing is deeply integrated and highly framework-specific, it's probably a better idea to maintain separate, minimal adapters, like <code>@keystatic/astro</code> and soon, perhaps even a <code>@keystatic/sveltekit</code> adapter that simplifies and standardizes the solutions we explored in this blog post.</p><p>Speaking of which - do you think it would be worth creating an adapter like <code>@keystatic/sveltekit</code> along with a starter project, and contributing it to the Keystatic project? That would take some initial work, and maintenance in the future, but would make it possible to use the Keystatic CLI to rapidly scaffold a Keystatic project. And if we have the <code>@keystatic/sveltekit</code> adapter, it would be possible to create a <code>keystatic</code> addon for the <!>, to add Keystatic to both new and existing projects.</p><h2>Closing thoughts</h2><p>If you take one thing away from all this, let it be the fact that it's really important to create good public APIs for your library. Just look at what happened thanks to <code>@keystatic/core</code> making the right building blocks available to allow customization beyond what was originally intended.</p><p>This approach has already simplified some of my projects. It could certainly be refined though, so you're welcome to join the discussion and help make it better.</p><p><strong>Check out the <!> repository to Keystatic to your project and learn more.</strong></p><p>Please share what you build using SvelteKit and Keystatic!</p><p>Happy hacking!</p></article>");function Pe(z){var y=ve(),d=p(y),P=t(p(d));l(P,{href:"https://svelte.dev/docs/kit/introduction",children:(e,r)=>{a();var s=n("SvelteKit");o(e,s)},$$slots:{default:!0}});var J=t(P,2);l(J,{href:"https://keystatic.com",children:(e,r)=>{a();var s=n("Keystatic CMS");o(e,s)},$$slots:{default:!0}}),a(),i(d);var h=t(d,2),$=t(p(h));l($,{href:"github.com/CollierCZ/markdoc-svelte",children:(e,r)=>{a();var s=n("markdoc-svelte");o(e,s)},$$slots:{default:!0}});var Q=t($,2);l(Q,{href:"https://markdoc.dev/",children:(e,r)=>{a();var s=n("powerful features");o(e,s)},$$slots:{default:!0}}),a(),i(h);var u=t(h,2),S=p(u),Z=t(p(S));l(Z,{href:"https://github.com/Greenheart/keystatic-sveltekit",children:(e,r)=>{a();var s=n("keystatic-sveltekit");o(e,s)},$$slots:{default:!0}}),a(),i(S),i(u);var B=t(u,9),v=t(p(B)),I=t(p(v));l(I,{href:"https://keystatic.com/docs/fields/relationship",children:(e,r)=>{a();var s=n("relationships");o(e,s)},$$slots:{default:!0}});var X=t(I,2);l(X,{href:"https://github.com/Greenheart/idg.tools/blob/a70dc2cf41507e1e2036a181632ee13298bb8923/content/scripts/build-content.ts",children:(e,r)=>{a();var s=n("example");o(e,s)},$$slots:{default:!0}}),a(),i(v);var _=t(v,2),x=t(p(_));l(x,{href:"https://github.com/Thinkmill/keystatic/issues/1433",children:(e,r)=>{a();var s=n("open feature request");o(e,s)},$$slots:{default:!0}});var ee=t(x,2);l(ee,{href:"https://decapcms.org/docs/open-authoring/",children:(e,r)=>{a();var s=n("Decap CMS");o(e,s)},$$slots:{default:!0}}),a(),i(_),i(B);var m=t(B,3),j=t(p(m));l(j,{href:"github.com/29ki/29k",children:(e,r)=>{a();var s=n("Aware (29k)");o(e,s)},$$slots:{default:!0}});var se=t(j,2);l(se,{href:"https://github.com/Greenheart/idg.tools",children:(e,r)=>{a();var s=n("IDG.tools");o(e,s)},$$slots:{default:!0}}),a(),i(m);var f=t(m,2),te=t(p(f));l(te,{href:"https://github.com/Greenheart/keystatic-sveltekit",children:(e,r)=>{a();var s=n("keystatic-sveltekit");o(e,s)},$$slots:{default:!0}}),a(),i(f);var k=t(f,3),M=p(k),T=t(p(M));l(T,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",children:(e,r)=>{a();var s=n("Request");o(e,s)},$$slots:{default:!0}});var ae=t(T,4);l(ae,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Request",children:(e,r)=>{a();var s=n("Response");o(e,s)},$$slots:{default:!0}}),a(2),i(M),a(),i(k);var b=t(k,2),H=t(p(b),3);l(H,{href:"https://keystatic.com/docs/configuration",children:(e,r)=>{a();var s=n("keystatic.config.ts");o(e,s)},$$slots:{default:!0}});var oe=t(H,2);l(oe,{href:"https://svelte.dev/docs/kit/routing#server-Fallback-method-handler",children:(e,r)=>{a();var s=n("fallback");o(e,s)},$$slots:{default:!0}}),a(),i(b);var R=t(b,3);c(R,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// routes/api/keystatic/[..rest]/+server.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#C678DD"> type</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">RequestHandler</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@sveltejs/kit'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">makeGenericAPIRouteHandler</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@keystatic/core/api/generic'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E06C75"> config</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> '../../../../../keystatic.config'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> handleKeystaticAPI</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> makeGenericAPIRouteHandler</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">config</span><span style="color:#ABB2BF"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> const</span><span style="color:#61AFEF"> fallback</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">RequestHandler</span><span style="color:#56B6C2"> =</span><span style="color:#C678DD"> async</span><span style="color:#ABB2BF"> ({ </span><span style="color:#E06C75;font-style:italic">request</span><span style="color:#ABB2BF"> }) </span><span style="color:#C678DD">=></span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">, ...</span><span style="color:#E5C07B">responseInit</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> handleKeystaticAPI</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">request</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Response</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">responseInit</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var g=t(R,4),ne=t(p(g),3);l(ne,{href:"https://svelte.dev/docs/kit/hooks#Server-hooks-handle",children:(e,r)=>{a();var s=n("handle");o(e,s)},$$slots:{default:!0}}),a(3),i(g);var q=t(g);c(q,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// hooks.server.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#C678DD">type</span><span style="color:#E06C75"> Handle</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@sveltejs/kit'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">makeGenericAPIRouteHandler</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@keystatic/core/api/generic'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E06C75"> config</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> '../keystatic.config'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> isKeystaticAPIPath</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> /</span><span style="color:#C678DD">^</span><span style="color:#56B6C2">\\/</span><span style="color:#E06C75">api</span><span style="color:#56B6C2">\\/</span><span style="color:#E06C75">keystatic/</span></span>
<span class="line"><span style="color:#C678DD">const</span><span style="color:#E5C07B"> handleKeystaticAPI</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> makeGenericAPIRouteHandler</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">config</span><span style="color:#ABB2BF"> })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> const</span><span style="color:#61AFEF"> handle</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">Handle</span><span style="color:#56B6C2"> =</span><span style="color:#ABB2BF"> ({ </span><span style="color:#E06C75;font-style:italic">event</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">resolve</span><span style="color:#ABB2BF"> }) </span><span style="color:#C678DD">=></span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">isKeystaticAPIPath</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">event</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">url</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">pathname</span><span style="color:#ABB2BF">)) {</span></span>
<span class="line"><span style="color:#C678DD">        const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">, ...</span><span style="color:#E5C07B">responseInit</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> handle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">event</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">request</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Response</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">responseInit</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#61AFEF"> resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">event</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var A=t(q),le=t(p(A),5);l(le,{href:"https://svelte.dev/docs/kit/@sveltejs-kit-hooks#sequence",children:(e,r)=>{a();var s=n("sequence");o(e,s)},$$slots:{default:!0}}),a(),i(A);var G=t(A);c(G,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// hooks.server.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">handleKeystaticAPI</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '$lib/keystatic'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#E06C75"> config</span><span style="color:#C678DD"> from</span><span style="color:#98C379"> '../keystatic.config'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> const</span><span style="color:#E5C07B"> handle</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> handleKeystaticAPI</span><span style="color:#ABB2BF">({ </span><span style="color:#E06C75">config</span><span style="color:#ABB2BF"> })</span></span>
<span class="line"></span></code></pre>`});var O=t(G,2);c(O,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// lib/keystatic/index.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">makeGenericAPIRouteHandler</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@keystatic/core/api/generic'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#C678DD"> type</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">Handle</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@sveltejs/kit'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic">/** Create an API handler for all keystatic API requests. */</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> function</span><span style="color:#61AFEF"> handleKeystaticAPI</span><span style="color:#ABB2BF">(</span></span>
<span class="line"><span style="color:#ABB2BF">    ...</span><span style="color:#E06C75;font-style:italic">args</span><span style="color:#ABB2BF">: </span><span style="color:#E5C07B">Parameters</span><span style="color:#ABB2BF">&#x3C;</span><span style="color:#C678DD">typeof</span><span style="color:#E06C75"> makeGenericAPIRouteHandler</span><span style="color:#ABB2BF">></span></span>
<span class="line"><span style="color:#ABB2BF">): </span><span style="color:#E5C07B">Handle</span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> isKeystaticAPIPath</span><span style="color:#56B6C2"> =</span><span style="color:#E06C75"> /</span><span style="color:#C678DD">^</span><span style="color:#56B6C2">\\/</span><span style="color:#E06C75">api</span><span style="color:#56B6C2">\\/</span><span style="color:#E06C75">keystatic/</span></span>
<span class="line"><span style="color:#C678DD">    const</span><span style="color:#E5C07B"> handle</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> makeGenericAPIRouteHandler</span><span style="color:#ABB2BF">(...</span><span style="color:#E06C75">args</span><span style="color:#ABB2BF">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">    return</span><span style="color:#C678DD"> async</span><span style="color:#ABB2BF"> ({ </span><span style="color:#E06C75;font-style:italic">event</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75;font-style:italic">resolve</span><span style="color:#ABB2BF"> }) </span><span style="color:#C678DD">=></span><span style="color:#ABB2BF"> {</span></span>
<span class="line"><span style="color:#C678DD">        if</span><span style="color:#ABB2BF"> (</span><span style="color:#E5C07B">isKeystaticAPIPath</span><span style="color:#ABB2BF">.</span><span style="color:#61AFEF">test</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">event</span><span style="color:#ABB2BF">.</span><span style="color:#E5C07B">url</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">pathname</span><span style="color:#ABB2BF">)) {</span></span>
<span class="line"><span style="color:#C678DD">            const</span><span style="color:#ABB2BF"> { </span><span style="color:#E5C07B">body</span><span style="color:#ABB2BF">, ...</span><span style="color:#E5C07B">responseInit</span><span style="color:#ABB2BF"> } </span><span style="color:#56B6C2">=</span><span style="color:#C678DD"> await</span><span style="color:#61AFEF"> handle</span><span style="color:#ABB2BF">(</span><span style="color:#E5C07B">event</span><span style="color:#ABB2BF">.</span><span style="color:#E06C75">request</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#C678DD">            return</span><span style="color:#C678DD"> new</span><span style="color:#61AFEF"> Response</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">body</span><span style="color:#ABB2BF">, </span><span style="color:#E06C75">responseInit</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">        return</span><span style="color:#61AFEF"> resolve</span><span style="color:#ABB2BF">(</span><span style="color:#E06C75">event</span><span style="color:#ABB2BF">)</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var C=t(O,3),re=t(p(C));l(re,{href:"https://github.com/sveltejs/kit/issues/8896",children:(e,r)=>{a();var s=n("issue");o(e,s)},$$slots:{default:!0}}),a(3),i(C);var w=t(C,3),pe=t(p(w));l(pe,{href:"https://github.com/bfanger/svelte-preprocess-react",children:(e,r)=>{a();var s=n("svelte-preprocess-react");o(e,s)},$$slots:{default:!0}}),a(),i(w);var F=t(w,5),L=t(p(F));l(L,{href:"https://svelte.dev/docs/kit/hooks#Server-hooks",children:(e,r)=>{a();var s=n("handle");o(e,s)},$$slots:{default:!0}});var ie=t(L,2);l(ie,{href:"https://github.com/sveltejs/kit/issues/8896",children:(e,r)=>{a();var s=n("SvelteKit does not support registering");o(e,s)},$$slots:{default:!0}}),a(),i(F);var Y=t(F,2);c(Y,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// hooks.server.ts</span></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> const</span><span style="color:#E5C07B"> handle</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> handleKeystatic</span><span style="color:#ABB2BF">()</span></span>
<span class="line"></span></code></pre>`});var W=t(Y,2);c(W,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// hooks.server.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">sequence</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@sveltejs/kit/hooks'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> const</span><span style="color:#E5C07B"> handle</span><span style="color:#56B6C2"> =</span><span style="color:#61AFEF"> sequence</span><span style="color:#ABB2BF">(...</span><span style="color:#E06C75">yourOtherHandleHooks</span><span style="color:#ABB2BF">, </span><span style="color:#61AFEF">handleKeystatic</span><span style="color:#ABB2BF">())</span></span>
<span class="line"></span></code></pre>`});var D=t(W),ce=t(p(D),3);l(ce,{href:"https://github.com/Thinkmill/keystatic/blob/63c767bbb8b9bbc96c30535862bcccfbbc4ea346/packages/astro/src/index.ts",children:(e,r)=>{a();var s=n("@keystatic/astro");o(e,s)},$$slots:{default:!0}}),a(),i(D);var K=t(D,12),ye=t(p(K),3);l(ye,{href:"https://github.com/Thinkmill/keystatic/issues/366",children:(e,r)=>{a();var s=n("this issue");o(e,s)},$$slots:{default:!0}}),a(3),i(K);var N=t(K);c(N,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// vite.config.ts</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">sveltekit</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@sveltejs/kit/vite'</span></span>
<span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">defineConfig</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> 'vite'</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD">export</span><span style="color:#C678DD"> default</span><span style="color:#61AFEF"> defineConfig</span><span style="color:#ABB2BF">({</span></span>
<span class="line"><span style="color:#E06C75">    server</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // NOTE: Keystatic redirects to \`127.0.0.1\` when it loads, which doesn't work with the default SvelteKit + Vite configs.</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Therefore, we need to make the Vite server host \`127.0.0.1\` to allow the server to use both localhost and 127.0.0.1</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Related issue: https://github.com/Thinkmill/keystatic/issues/366</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // This might be possible to remove in a preprocessing step or by patching Keystatic</span></span>
<span class="line"><span style="color:#7F848E;font-style:italic">        // Ideally we should be able to could configure (or force) keystatic to use the same host as the Vite server.</span></span>
<span class="line"><span style="color:#E06C75">        host</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">'127.0.0.1'</span><span style="color:#ABB2BF">,</span></span>
<span class="line"><span style="color:#E06C75">        fs</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">            allow</span><span style="color:#ABB2BF">: [</span><span style="color:#98C379">'./keystatic.config.ts'</span><span style="color:#ABB2BF">],</span></span>
<span class="line"><span style="color:#ABB2BF">        },</span></span>
<span class="line"><span style="color:#ABB2BF">    },</span></span>
<span class="line"><span style="color:#ABB2BF">})</span></span>
<span class="line"></span></code></pre>`});var E=t(N,7),de=t(p(E),7);l(de,{href:"https://github.com/sveltejs/cli",children:(e,r)=>{a();var s=n("Svelte CLI");o(e,s)},$$slots:{default:!0}}),a(),i(E);var V=t(E,4),U=p(V),he=t(p(U));l(he,{href:"https://github.com/Greenheart/keystatic-sveltekit",children:(e,r)=>{a();var s=n("keystatic-sveltekit");o(e,s)},$$slots:{default:!0}}),a(),i(U),i(V),a(2),i(y),o(z,y)}export{Pe as default,Be as frontmatter,Ee as headings,Ae as slug};
