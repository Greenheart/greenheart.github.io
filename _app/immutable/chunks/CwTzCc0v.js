import"./DsnmJJEf.js";import"./pltd8r3C.js";import{f as E,a as t,s as e,c as n,A as s,B as l,r as p}from"./Ch4VLgmR.js";import{L as i}from"./BLMvKsEz.js";import{C as r}from"./CVvY9x6P.js";const R="run-typescript-directly-in-nodejs-22",N={title:"Run TypeScript Directly with Node.js 22",date:"2024-12-29",tags:["TypeScript","Node.js"],featured:!0},{title:q,date:O,tags:U,featured:W}=N,G=[{level:2,title:"How to run TypeScript directly with Node.js:",id:"how-to-run-typescript-directly-with-nodejs"},{level:2,title:"How to run TypeScript code with import aliases",id:"how-to-run-typescript-code-with-import-aliases"},{level:3,title:"1. Update configuration",id:"1-update-configuration"},{level:3,title:"2. Update code import statements",id:"2-update-code-import-statements"},{level:2,title:"Run TypeScript in production",id:"run-typescript-in-production"}];var H=E(`<article><p><strong>NOTE: Since Node.js 22.18.0 or 23.6.0, "type stripping" is enabled by default.</strong> See the latest Node.js docs for <!>.</p><hr/><p><strong>It's about to get much easier to run TypeScript directly with Node.js.</strong> As of Node.js <code>22.7.0</code>, there are two experimental command line flags to strip TypeScript types and convert TypeScript-only syntax into JavaScript that can be executed by Node.js.</p><p>This even works with import aliases if you make some config and code changes, as demonstrated later. But let's start with the basics first:</p><h2>How to run TypeScript directly with Node.js:</h2><!><p>If your code (or any dependencies) use TypeScript-only features like <code>enum</code> and <code>namespace</code>, you need to use the following command:</p><!><p>If you start many <code>node</code>-processes and want to filter out the <code>ExperimentalWarning</code>s from the log output, you can pass the flag <code>--no-warnings=ExperimentalWarning</code> to get a much cleaner output:</p><!><p>Reading the <!>, I'm especially excited that this brings us a step closer to full TypeScript-support without any external tools or command line flags.</p><blockquote><p>Future versions of Node.js will include support for TypeScript without the need for a command line flag.</p></blockquote><h2>How to run TypeScript code with import aliases</h2><p>One limitation as of Node.js is that import aliases defined via <code>tsconfig.json</code> and the <code>paths</code> option (<!>) don't work.</p><p>However, there is a workaround available by adding Node.js <!>, defined in the <code>imports</code> field of <code>package.json</code> to achieve the same effect. Let's look at an example:</p><h3>1. Update configuration</h3><p>If you have a <code>tsconfig.json</code> defining an <code>@app</code> import alias like this:</p><!><p>Then you can add the following import alias in <code>package.json</code> to make it work almost the same way (more on that in a moment):</p><!><p><strong>NOTE:</strong> Import aliases within your own module/code base need to start with the <code>#</code> character. If you know a way to make this work with a custom character like <code>@</code> or <code>$</code>, please <!>!</p><h3>2. Update code import statements</h3><p>To make your code run again, you need to update the imports in your code with a global find all <code>@app</code> and replace with <code>#app</code>.</p><p>For example, all your imports like this:</p><!><p>Need to be updated into:</p><!><p>Also note that Node.js requires explicit file extensions when using import aliases. Perhaps it's possible to use without <code>.ts</code> extensions, but at the same time, I think it's good to be explicit - especially since most of the imports are added automatically by the code editor.</p><h2>Run TypeScript in production</h2><p>Since this is an experimental feature, it's currently recommended to transpile TypeScript using <code>tsc</code> when building for production. To easily run TypeScript without a separate transpilation step, <code>tsx</code> is still a great choice - <!>.</p><p>However, for development and quick scripts, this is a big boost to productivity!</p></article>`);function J(A){var d=H(),y=n(d),T=e(n(y),2);i(T,{href:"https://nodejs.org/en/learn/typescript/run-natively",children:(o,c)=>{s();var a=l("more info");t(o,a)},$$slots:{default:!0}}),s(),p(y);var B=e(y,5);r(B,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">node</span><span style="color:#D19A66"> --experimental-strip-types</span><span style="color:#98C379"> main.ts</span></span>
<span class="line"></span></code></pre>`});var g=e(B,2);r(g,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">node</span><span style="color:#56B6C2"> \\</span></span>
<span class="line"><span style="color:#ABB2BF">--experimental-strip-types </span><span style="color:#56B6C2">\\</span></span>
<span class="line"><span style="color:#ABB2BF">--experimental-transform-types </span><span style="color:#98C379">main.ts</span></span>
<span class="line"></span></code></pre>`});var b=e(g,2);r(b,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#61AFEF">node</span><span style="color:#56B6C2"> \\</span></span>
<span class="line"><span style="color:#ABB2BF">--no-warnings=ExperimentalWarning </span><span style="color:#56B6C2">\\</span></span>
<span class="line"><span style="color:#ABB2BF">--experimental-strip-types </span><span style="color:#56B6C2">\\</span></span>
<span class="line"><span style="color:#ABB2BF">--experimental-transform-types </span><span style="color:#98C379">main.ts</span></span>
<span class="line"></span></code></pre>`});var h=e(b),_=e(n(h));i(_,{href:"https://nodejs.org/en/learn/typescript/run-natively",children:(o,c)=>{s();var a=l("official guide");t(o,a)},$$slots:{default:!0}}),s(),p(h);var u=e(h,3),$=e(n(u),5);i($,{href:"https://www.typescriptlang.org/docs/handbook/modules/reference.html#paths",children:(o,c)=>{s();var a=l("docs");t(o,a)},$$slots:{default:!0}}),s(),p(u);var m=e(u),j=e(n(m));i(j,{href:"https://nodejs.org/api/packages.html#subpath-patterns",children:(o,c)=>{s();var a=l("subpath patterns");t(o,a)},$$slots:{default:!0}}),s(5),p(m);var w=e(m,3);r(w,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// tsconfig.json</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">    "compilerOptions"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">        "paths"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">            "@app/*"</span><span style="color:#ABB2BF">: [</span><span style="color:#98C379">"./src/*"</span><span style="color:#ABB2BF">]</span></span>
<span class="line"><span style="color:#ABB2BF">        }</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var k=e(w,2);r(k,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#7F848E;font-style:italic">// package.json</span></span>
<span class="line"><span style="color:#ABB2BF">{</span></span>
<span class="line"><span style="color:#E06C75">    "imports"</span><span style="color:#ABB2BF">: {</span></span>
<span class="line"><span style="color:#E06C75">        "#app/*"</span><span style="color:#ABB2BF">: </span><span style="color:#98C379">"./src/*"</span></span>
<span class="line"><span style="color:#ABB2BF">    }</span></span>
<span class="line"><span style="color:#ABB2BF">}</span></span>
<span class="line"></span></code></pre>`});var f=e(k),C=e(n(f),8);i(C,{href:"https://fosstodon.org/@Greenheart",children:(o,c)=>{s();var a=l("let me know");t(o,a)},$$slots:{default:!0}}),s(),p(f);var v=e(f,4);r(v,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">something</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '@app/lib/something'</span></span>
<span class="line"></span></code></pre>`});var x=e(v,2);r(x,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#C678DD">import</span><span style="color:#ABB2BF"> { </span><span style="color:#E06C75">something</span><span style="color:#ABB2BF"> } </span><span style="color:#C678DD">from</span><span style="color:#98C379"> '#app/lib/something.ts'</span></span>
<span class="line"></span></code></pre>`});var F=e(x,3),S=e(n(F),5);i(S,{href:"https://github.com/privatenumber/tsx/",children:(o,c)=>{s();var a=l("learn more here");t(o,a)},$$slots:{default:!0}}),s(),p(F),s(),p(d),t(A,d)}export{J as default,N as frontmatter,G as headings,R as slug};
