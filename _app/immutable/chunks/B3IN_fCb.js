import{f as i,a as s}from"./C-_Jg4eM.js";import"./Dc6BNj0H.js";import{s as a,c as n,n as r,r as l}from"./Cl0IYdhl.js";import{C as c}from"./DWMmyZ6x.js";const f="_git-ignore-files-and-directories-without-using-gitignore",d={title:"Make Git Ignore files and directories without using .gitignore",date:"2025-09-19",tags:["Git","Terminal","Keystatic CMS"]},{title:w,date:m,tags:k}=d,b=[{level:2,title:"When you might want to do this",id:"when-you-might-want-to-do-this"},{level:2,title:"Why not use alternatives?",id:"why-not-use-alternatives"},{level:2,title:"Potential drawbacks of using ",id:"potential-drawbacks-of-using"},{level:2,title:"Summary",id:"summary"}];var h=i("<article><p>By adding a pattern with the <code>.gitignore</code> syntax to the special file <code>.git/info/exclude</code>, it's possible to ignore files and directories without using <code>.gitignore</code> files.</p><!><h2>When you might want to do this</h2><p>This is useful to handle draft content, local config files, and when working with a Git-based CMS like Keystatic where you want to keep placeholder content out of the Git history.</p><p>https://github.com/Thinkmill/keystatic/issues/1456</p><h2>Why not use alternatives?</h2><p>Both <code>git update-index --assume-unchanged</code> and <code>git update-index --skip-worktree</code> are good alternatives. However, they have some drawbacks that make <code>.git/info/exclude</code> easier to work with.</p><p>Because those only apply to one file at a time, and while it could be scripted to recursively apply for an entire directory with all its subdirectories and files, it's still not an ideal solution. It works well for a few files, but for anything more it's easier and better to</p><p>However, <code>.gitignore</code> is better when you need to apply these ignore patterns consistently for a large team, or in cases where it's critical to not add sensitive information to your repository.</p><h2>Potential drawbacks of using <code>.git/info/exclude</code></h2><ul><li>Search results may be missing from your repository. Easily solved by manually including the directories you want to search, like <code>src/**/*</code> or just <code>src/</code>.</li><li>The <code>.git/info/exclude</code> is only applied to your local Git repository. For many use cases, the regular <code>.gitignore</code> files are a better choice.</li></ul><h2>Summary</h2><p>Taking this all into account, <code>.git/info/exclude</code> is very useful for local overrides - especially when working with Git-based content. However, like with any solution, make sure to consider what works best in your project.</p></article>");function v(t){var e=h(),o=a(n(e));c(o,{codeHTML:`<pre class="shiki one-dark-pro" style="background-color:#282c34;color:#abb2bf" tabindex="0"><code><span class="line"><span style="color:#56B6C2">echo</span><span style="color:#98C379"> "src/content/posts/_*"</span><span style="color:#ABB2BF"> >> </span><span style="color:#98C379">.git/info/exclude</span></span>
<span class="line"></span></code></pre>`}),r(11),l(e),s(t,e)}export{v as default,d as frontmatter,b as headings,f as slug};
