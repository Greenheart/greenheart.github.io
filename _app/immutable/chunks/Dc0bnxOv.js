import"./DsnmJJEf.js";import"./Czx8qqN7.js";import{f as H,a as n,s as e,c as r,A as p,B as t,r as s}from"./Dr2DAEgR.js";import{C as i}from"./DakRiVff.js";import{L as d}from"./CNGJs3MS.js";const O="run-typescript-directly-in-nodejs-22",P={title:"Run TypeScript Directly with Node.js 22",date:"2024-12-29",tags:["TypeScript","Node.js"],featured:!0},{title:W,date:B,tags:C,featured:F}=P,D=[{level:2,title:"How to run TypeScript directly with Node.js:",id:"how-to-run-typescript-directly-with-nodejs"},{level:2,title:"How to run TypeScript code with import aliases",id:"how-to-run-typescript-code-with-import-aliases"},{level:3,title:"1. Update configuration",id:"1-update-configuration"},{level:3,title:"2. Update code import statements",id:"2-update-code-import-statements"},{level:2,title:"Run TypeScript in production",id:"run-typescript-in-production"}];var R=H("<article><p><strong>It's about to get much easier to run TypeScript directly with Node.js.</strong> As of Node.js <code>22.7.0</code>, there are two experimental command line flags to strip TypeScript types and convert TypeScript-only syntax into JavaScript that can be excuted by Node.js.</p><p>This even works with import aliases if you make some config and code changes, as demonstrated later. But let's start with the basics first:</p><h2>How to run TypeScript directly with Node.js:</h2><!><p>If your code (or any dependencies) use TypeScript-only features like <code>enum</code> and <code>namespace</code>, you need to use the following command:</p><!><p>If you start many <code>node</code>-processes and want to filter out the <code>ExperimentalWarning</code>s from the log output, you can pass the flag <code>--no-warnings=ExperimentalWarning</code> to get a much cleaner output:</p><!><p>Reading the <!>, I'm especially excited that this brings us a step closer to full TypeScript-support without any external tools or command line flags.</p><blockquote><p>Future versions of Node.js will include support for TypeScript without the need for a command line flag.</p></blockquote><h2>How to run TypeScript code with import aliases</h2><p>One limitation as of Node.js is that import aliases defined via <code>tsconfig.json</code> and the <code>paths</code> option (<!>) don't work.</p><p>However, there is a workaround availalble by adding Node.js <!>, defined in the <code>imports</code> field of <code>package.json</code> to achieve the same effect. Let's look at an example:</p><h3>1. Update configuration</h3><p>If you have a <code>tsconfig.json</code> defining an <code>@app</code> import alias like this:</p><!><p>Then you can add the following import alias in <code>package.json</code> to make it work almost the same way (more on that in a moment):</p><!><p><strong>NOTE:</strong> Import aliases within your own module/code base need to start with the <code>#</code> character. If you know a way to make this work with a custom character like <code>@</code> or <code>$</code>, please <!>!</p><h3>2. Update code import statements</h3><p>To make your code run again, you need to update the imports in your code with a global find all <code>@app</code> and replace with <code>#app</code>.</p><p>For example, all your imports like this:</p><!><p>Need to be updated into:</p><!><p>Also note that Node.js requires explicit file extensions when using import aliases. Perhaps it's possible to use without <code>.ts</code> extensions, but at the same time, I think it's good to be explicit - especially since most of the imports are added automatically by the code editor.</p><h2>Run TypeScript in production</h2><p>Since this is an experimental feature, it's currently recommended to transpile TypeScript using <code>tsc</code> when building for production. To easily run TypeScript without a separate transpilation step, <code>tsx</code> is still a great choice - <!>.</p><p>However, for development and quick scripts, this is a big boost to productivity!</p></article>");function G(j){var l=R(),f=e(r(l),3);i(f,{"data-language":"sh",code:`node --experimental-strip-types main.ts
`});var y=e(f,2);i(y,{"data-language":"sh",code:`node \\
--experimental-strip-types \\
--experimental-transform-types main.ts
`});var w=e(y,2);i(w,{"data-language":"sh",code:`node \\
--no-warnings=ExperimentalWarning \\
--experimental-strip-types \\
--experimental-transform-types main.ts
`});var h=e(w),$=e(r(h));d($,{href:"https://nodejs.org/en/learn/typescript/run-natively",children:(o,c)=>{t();var a=p("official guide");n(o,a)},$$slots:{default:!0}}),t(),s(h);var u=e(h,3),T=e(r(u),5);d(T,{href:"https://www.typescriptlang.org/docs/handbook/modules/reference.html#paths",children:(o,c)=>{t();var a=p("docs");n(o,a)},$$slots:{default:!0}}),t(),s(u);var m=e(u),S=e(r(m));d(S,{href:"https://nodejs.org/api/packages.html#subpath-patterns",children:(o,c)=>{t();var a=p("subpath patterns");n(o,a)},$$slots:{default:!0}}),t(5),s(m);var v=e(m,3);i(v,{"data-language":"json",code:`// tsconfig.json
{
    "compilerOptions": {
        "paths": {
            "@app/*": ["./src/*"]
        }
    }
}
`});var x=e(v,2);i(x,{"data-language":"json",code:`// package.json
{
    "imports": {
        "#app/*": "./src/*"
    }
}
`});var g=e(x),N=e(r(g),8);d(N,{href:"https://fosstodon.org/@Greenheart",children:(o,c)=>{t();var a=p("let me know");n(o,a)},$$slots:{default:!0}}),t(),s(g);var b=e(g,4);i(b,{"data-language":"ts",code:`import { something } from '@app/lib/something'
`});var k=e(b,2);i(k,{"data-language":"ts",code:`import { something } from '#app/lib/something.ts'
`});var _=e(k,3),I=e(r(_),5);d(I,{href:"https://github.com/privatenumber/tsx/",children:(o,c)=>{t();var a=p("learn more here");n(o,a)},$$slots:{default:!0}}),t(),s(_),t(),s(l),n(j,l)}export{G as default,P as frontmatter,D as headings,O as slug};
