import{a as g,t as y}from"./disclose-version.1Vpr6LmH.js";import{s as n,f as k,c as e,r as o,n as f}from"./runtime.Cp43ptvP.js";import{h as t}from"./html.DPlMD9TO.js";import{l as v,s as z}from"./index-client.XEQ49Y8H.js";import{B as w}from"./BlogLayoutWrapper.VAtOGgHk.js";const _={title:"Improving Oh My Zsh Startup Time with Lazy Loading",date:"2023-03-23T00:00:00.000Z",tags:["DX","Code Snippet"]};var $=y('<p>Using <a href="https://ohmyz.sh/" rel="nofollow">Oh My Zsh</a> is usually a great experience. However, adding heavy plugins (like <code>nvm</code>) to load at startup time can really hurt performance. Luckily thereâ€™s a way to lazy load them.</p> <h2>A Simple Solution</h2> <pre class="language-shell"><!></pre> <ol><li>Add the nvm plugin to your <code>.zshrc</code> file.</li> <li>Enable lazy loading for the <code>nvm</code> plugin.</li> <li>Make sure you source Oh My Zsh at the end.</li></ol> <p>This method reduced my shell startup time from <em>~1.5 s</em> to <em>~200 ms</em>. A <strong>huge</strong> improvement for a common action I perform many times daily.</p> <p>However, I soon realised some of my projects had external dependencies that relied on commands like <code>node</code> and <code>npm</code> (and other package managers) to always be defined in the shell environment. This caused weird crashes, since lazy loading <code>nvm</code> means commands like <code>node</code> and <code>npm</code> only gets enabled when they first got used.</p> <h2>Conditionally Lazy Loading for Specific Directories</h2> <p>Adding an if statement to avoid lazy loading in specific directories:</p> <pre class="language-shell"><!></pre> <h2>Add more commands that should load nvm</h2> <p>In the <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nvm" rel="nofollow">documentation</a> for <code>nvm</code> plugin, there are also other features that can be useful. For example, this is how to make sure <code>npx</code> and <code>pnpx</code> work even in new terminals.</p> <pre class="language-shell"><!></pre> <p>Hopefully this saves some time, allowing you move at the speed of thought ðŸ’­</p>',1);function H(c,r){const i=v(r,["children","$$slots","$$events","$$legacy"]);w(c,z(()=>i,_,{children:(m,b)=>{var p=$(),s=n(k(p),4),d=e(s);t(d,()=>`<code class="language-shell"><span class="token comment"># ~/.zshrc</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>nvm <span class="token function">git</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span> <span class="token comment"># 2</span>

<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh <span class="token comment"># 3</span></code>`),o(s);var a=n(s,12),h=e(a);t(h,()=>`<code class="language-shell"><span class="token comment"># ~/.zshrc</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>nvm <span class="token function">git</span><span class="token punctuation">)</span>

<span class="token comment"># This excludes any subdirectory of "/your-project/"</span>
<span class="token comment"># =~ is used for RegExp matching.</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$PWD</span> <span class="token operator">=~</span> <span class="token string">"/your-project/"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh</code>`),o(a);var l=n(a,6),u=e(l);t(u,()=>`<code class="language-shell">zstyle <span class="token string">':omz:plugins:nvm'</span> lazy-cmd npx pnpx</code>`),o(l),f(2),g(m,p)},$$slots:{default:!0}}))}export{H as default,_ as metadata};
