import{a as b,t as j}from"./disclose-version.CF7-n5Bm.js";import"./legacy.DpqE76vO.js";import{s as e,f as _,c as s,r as a,n as x}from"./runtime.enW9DSRT.js";import{h as t}from"./html.BRjWue5H.js";import{l as T,s as S}from"./props.Dxc433qR.js";import{B as $}from"./BlogLayoutWrapper.BnAafb44.js";const N={title:"Run TypeScript Directly with Node.js 22",date:"2024-12-29T00:00:00.000Z",tags:["TypeScript","Node.js"],featured:!0};var I=j('<p><strong>It’s about to get much easier to run TypeScript directly with Node.js.</strong> As of Node.js <code>22.7.0</code>, there are two experimental command line flags to strip TypeScript types and convert TypeScript-only syntax into JavaScript that can be excuted by Node.js.</p> <p>This even works with import aliases if you make some config and code changes, as demonstrated later. But let’s start with the basics first:</p> <h2>How to run TypeScript directly with Node.js:</h2> <pre class="language-sh"><!></pre> <p>If your code (or any dependencies) use TypeScript-only features like <code>enum</code> and <code>namespace</code>, you need to use the following command:</p> <pre class="language-sh"><!></pre> <p>Reading the <a href="https://nodejs.org/en/learn/typescript/run-natively" rel="nofollow">official guide</a>, I’m especially excited that this brings us a step closer to full TypeScript-support without any external tools or command line flags.</p> <blockquote><p>Future versions of Node.js will include support for TypeScript without the need for a command line flag.</p></blockquote> <h2>How to run TypeScript code with import aliases</h2> <p>One limitation as of Node.js is that import aliases defined via <code>tsconfig.json</code> and the <code>paths</code> option (<a href="https://www.typescriptlang.org/docs/handbook/modules/reference.html#paths" rel="nofollow">docs</a>) don’t work.</p> <p>However, there is a workaround availalble by adding Node.js <a href="https://nodejs.org/api/packages.html#subpath-patterns" rel="nofollow">subpath patterns</a>, defined in the <code>imports</code> field of <code>package.json</code> to achieve the same effect. Let’s look at an example:</p> <h3>1. Update configuration</h3> <p>If you have a <code>tsconfig.json</code> defining an <code>@app</code> import alias like this:</p> <pre class="language-json"><!></pre> <p>Then you can add the following import alias in <code>package.json</code> to make it work almost the same way (more on that in a moment):</p> <pre class="language-json"><!></pre> <p><strong>NOTE:</strong> Import aliases within your own module/code base need to start with the <code>#</code> character. If you know a way to make this work with a custom character like <code>@</code> or <code>$</code>, please <a href="https://fosstodon.org/@Greenheart" rel="nofollow">let me know</a>!</p> <h3>2. Update code import statements</h3> <p>To make your code run again, you need to update the imports in your code with a global find all <code>@app</code> and replace with <code>#app</code>.</p> <p>For example, all your imports like this:</p> <pre class="language-ts"><!></pre> <p>Need to be updated into:</p> <pre class="language-ts"><!></pre> <p>Also note that Node.js requires explicit file extensions when using import aliases. Perhaps it’s possible to use without <code>.ts</code> extensions, but at the same time, I think it’s good to be explicit - especially since most of the imports are added automatically by the code editor.</p> <h2>Run TypeScript in production</h2> <p>Since this is an experimental feature, it’s currently recommended to transpile TypeScript using <code>tsc</code> when building for production. To easily run TypeScript without a separate transpilation step, <code>tsx</code> (<a href="https://github.com/privatenumber/tsx/" rel="nofollow">learn more</a>) is still a great choice.</p> <p>However, for development and quick scripts, this is a big boost to productivity!</p>',1);function L(d,u){const h=T(u,["children","$$slots","$$events","$$legacy"]);$(d,S(()=>h,N,{children:(m,q)=>{var c=I(),o=e(_(c),6),g=s(o);t(g,()=>'<code class="language-sh"><span class="token function">node</span> --experimental-strip-types main.ts</code>'),a(o);var n=e(o,4),k=s(n);t(k,()=>'<code class="language-sh"><span class="token function">node</span> --experimental-strip-types --experimental-transform-types main.ts</code>'),a(n);var p=e(n,16),f=s(p);t(f,()=>`<code class="language-json"><span class="token comment">// tsconfig.json</span>
<span class="token punctuation">&#123;</span>
  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token property">"@app/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/*"</span><span class="token punctuation">]</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),a(p);var r=e(p,4),y=s(r);t(y,()=>`<code class="language-json"><span class="token comment">// package.json</span>
<span class="token punctuation">&#123;</span>
  <span class="token property">"imports"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token property">"#app/*"</span><span class="token operator">:</span> <span class="token string">"./src/*"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),a(r);var i=e(r,10),w=s(i);t(w,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> something <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@app/lib/something'</span></code>`),a(i);var l=e(i,4),v=s(l);t(v,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> something <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'#app/lib/something.ts'</span></code>`),a(l),x(8),b(m,c)},$$slots:{default:!0}}))}export{L as default,N as metadata};
