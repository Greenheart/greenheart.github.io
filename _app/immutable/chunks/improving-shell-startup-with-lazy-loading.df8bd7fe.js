import{S as Zt,i as jt,s as Rt,a0 as at,y as nt,z as ot,A as lt,a1 as qt,a2 as Lt,g as rt,d as pt,B as it,a3 as Ct,k as r,q as a,a as _,l as p,m as i,r as n,h as s,c as v,n as st,b as c,E as t}from"./index.21b00dcf.js";import{P as Ft}from"./_post.3c539600.js";import{L as Dt}from"./Link.c3d01ee6.js";function Ut(g){let o;return{c(){o=a("Oh My Zsh")},l(m){o=n(m,"Oh My Zsh")},m(m,u){c(m,o,u)},d(m){m&&s(o)}}}function Bt(g){let o;return{c(){o=a("documentation")},l(m){o=n(m,"documentation")},m(m,u){c(m,o,u)},d(m){m&&s(o)}}}function Gt(g){let o,m,u,b,d,E,S,te,M,_e,se,O,St=`<code class="language-shell"><span class="token comment"># ~/.zshrc</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>nvm <span class="token function">git</span><span class="token punctuation">)</span> <span class="token comment"># 1</span>
zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span> <span class="token comment"># 2</span>

<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh <span class="token comment"># 3</span></code>`,ae,$,L,ve,j,ye,ke,Ee,C,ge,R,$e,we,ze,q,xe,ne,y,be,F,Oe,Le,U,Ce,De,B,He,Se,oe,f,Me,G,Pe,Ae,N,Ie,Te,W,Ze,je,X,Re,qe,J,Fe,Ue,le,P,Be,re,A,Ge,pe,D,Mt=`<code class="language-shell"><span class="token comment"># ~/.zshrc</span>
<span class="token assign-left variable">plugins</span><span class="token operator">=</span><span class="token punctuation">(</span>nvm <span class="token function">git</span><span class="token punctuation">)</span>

<span class="token comment"># This excludes any subdirectory of "/your-project/"</span>
<span class="token comment"># =~ is used for RegExp matching.</span>
<span class="token keyword">if</span> <span class="token operator">!</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token environment constant">$PWD</span> <span class="token operator">=~</span> <span class="token string">"/your-project/"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>
  zstyle <span class="token string">':omz:plugins:nvm'</span> lazy <span class="token function">yes</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">source</span> <span class="token variable">$ZSH</span>/oh-my-zsh.sh</code>`,ie,I,Ne,ce,h,We,z,Xe,K,Je,Ke,Q,Qe,Ve,V,Ye,et,me,H,Pt=`<code class="language-shell">zstyle <span class="token string">':omz:plugins:nvm'</span> lazy-cmd npx pnpx</code>`,de,T,tt,ue;return u=new Dt({props:{href:"https://ohmyz.sh/",rel:"nofollow",$$slots:{default:[Ut]},$$scope:{ctx:g}}}),z=new Dt({props:{href:"https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nvm",rel:"nofollow",$$slots:{default:[Bt]},$$scope:{ctx:g}}}),{c(){o=r("p"),m=a("Using "),nt(u.$$.fragment),b=a(" is usually a great experience. However, adding heavy plugins (like "),d=r("code"),E=a("nvm"),S=a(") to load at startup time can really hurt performance. Luckily thereâ€™s a way to lazy load them."),te=_(),M=r("h2"),_e=a("A Simple Solution"),se=_(),O=r("pre"),ae=_(),$=r("ol"),L=r("li"),ve=a("Add the nvm plugin to your "),j=r("code"),ye=a(".zshrc"),ke=a(" file."),Ee=_(),C=r("li"),ge=a("Enable lazy loading for the "),R=r("code"),$e=a("nvm"),we=a(" plugin."),ze=_(),q=r("li"),xe=a("Make sure you source Oh My Zsh at the end."),ne=_(),y=r("p"),be=a("This method reduced my shell startup time from "),F=r("em"),Oe=a("~1.5 s"),Le=a(" to "),U=r("em"),Ce=a("~200 ms"),De=a(". A "),B=r("strong"),He=a("huge"),Se=a(" improvement for a common action I perform many times daily."),oe=_(),f=r("p"),Me=a("However, I soon realised some of my projects had external dependencies that relied on commands like "),G=r("code"),Pe=a("node"),Ae=a(" and "),N=r("code"),Ie=a("npm"),Te=a(" (and other package managers) to always be defined in the shell environment. This caused weird crashes, since lazy loading "),W=r("code"),Ze=a("nvm"),je=a(" means commands like "),X=r("code"),Re=a("node"),qe=a(" and "),J=r("code"),Fe=a("npm"),Ue=a(" only gets enabled when they first got used."),le=_(),P=r("h2"),Be=a("Conditionally Lazy Loading for Specific Directories"),re=_(),A=r("p"),Ge=a("Adding an if statement to avoid lazy loading in specific directories:"),pe=_(),D=r("pre"),ie=_(),I=r("h2"),Ne=a("Add more commands that should load nvm"),ce=_(),h=r("p"),We=a("In the "),nt(z.$$.fragment),Xe=a(" for "),K=r("code"),Je=a("nvm"),Ke=a(" plugin, there are also other features that can be useful. For example, this is how to make sure "),Q=r("code"),Qe=a("npx"),Ve=a(" and "),V=r("code"),Ye=a("pnpx"),et=a(" work even in new terminals."),me=_(),H=r("pre"),de=_(),T=r("p"),tt=a("Hopefully this saves some time, allowing you move at the speed of thought ðŸ’­"),this.h()},l(e){o=p(e,"P",{});var l=i(o);m=n(l,"Using "),ot(u.$$.fragment,l),b=n(l," is usually a great experience. However, adding heavy plugins (like "),d=p(l,"CODE",{});var Y=i(d);E=n(Y,"nvm"),Y.forEach(s),S=n(l,") to load at startup time can really hurt performance. Luckily thereâ€™s a way to lazy load them."),l.forEach(s),te=v(e),M=p(e,"H2",{});var ee=i(M);_e=n(ee,"A Simple Solution"),ee.forEach(s),se=v(e),O=p(e,"PRE",{class:!0});var At=i(O);At.forEach(s),ae=v(e),$=p(e,"OL",{});var Z=i($);L=p(Z,"LI",{});var fe=i(L);ve=n(fe,"Add the nvm plugin to your "),j=p(fe,"CODE",{});var ct=i(j);ye=n(ct,".zshrc"),ct.forEach(s),ke=n(fe," file."),fe.forEach(s),Ee=v(Z),C=p(Z,"LI",{});var he=i(C);ge=n(he,"Enable lazy loading for the "),R=p(he,"CODE",{});var mt=i(R);$e=n(mt,"nvm"),mt.forEach(s),we=n(he," plugin."),he.forEach(s),ze=v(Z),q=p(Z,"LI",{});var dt=i(q);xe=n(dt,"Make sure you source Oh My Zsh at the end."),dt.forEach(s),Z.forEach(s),ne=v(e),y=p(e,"P",{});var x=i(y);be=n(x,"This method reduced my shell startup time from "),F=p(x,"EM",{});var ut=i(F);Oe=n(ut,"~1.5 s"),ut.forEach(s),Le=n(x," to "),U=p(x,"EM",{});var ft=i(U);Ce=n(ft,"~200 ms"),ft.forEach(s),De=n(x,". A "),B=p(x,"STRONG",{});var ht=i(B);He=n(ht,"huge"),ht.forEach(s),Se=n(x," improvement for a common action I perform many times daily."),x.forEach(s),oe=v(e),f=p(e,"P",{});var k=i(f);Me=n(k,"However, I soon realised some of my projects had external dependencies that relied on commands like "),G=p(k,"CODE",{});var _t=i(G);Pe=n(_t,"node"),_t.forEach(s),Ae=n(k," and "),N=p(k,"CODE",{});var vt=i(N);Ie=n(vt,"npm"),vt.forEach(s),Te=n(k," (and other package managers) to always be defined in the shell environment. This caused weird crashes, since lazy loading "),W=p(k,"CODE",{});var yt=i(W);Ze=n(yt,"nvm"),yt.forEach(s),je=n(k," means commands like "),X=p(k,"CODE",{});var kt=i(X);Re=n(kt,"node"),kt.forEach(s),qe=n(k," and "),J=p(k,"CODE",{});var Et=i(J);Fe=n(Et,"npm"),Et.forEach(s),Ue=n(k," only gets enabled when they first got used."),k.forEach(s),le=v(e),P=p(e,"H2",{});var gt=i(P);Be=n(gt,"Conditionally Lazy Loading for Specific Directories"),gt.forEach(s),re=v(e),A=p(e,"P",{});var $t=i(A);Ge=n($t,"Adding an if statement to avoid lazy loading in specific directories:"),$t.forEach(s),pe=v(e),D=p(e,"PRE",{class:!0});var It=i(D);It.forEach(s),ie=v(e),I=p(e,"H2",{});var wt=i(I);Ne=n(wt,"Add more commands that should load nvm"),wt.forEach(s),ce=v(e),h=p(e,"P",{});var w=i(h);We=n(w,"In the "),ot(z.$$.fragment,w),Xe=n(w," for "),K=p(w,"CODE",{});var zt=i(K);Je=n(zt,"nvm"),zt.forEach(s),Ke=n(w," plugin, there are also other features that can be useful. For example, this is how to make sure "),Q=p(w,"CODE",{});var xt=i(Q);Qe=n(xt,"npx"),xt.forEach(s),Ve=n(w," and "),V=p(w,"CODE",{});var bt=i(V);Ye=n(bt,"pnpx"),bt.forEach(s),et=n(w," work even in new terminals."),w.forEach(s),me=v(e),H=p(e,"PRE",{class:!0});var Tt=i(H);Tt.forEach(s),de=v(e),T=p(e,"P",{});var Ot=i(T);tt=n(Ot,"Hopefully this saves some time, allowing you move at the speed of thought ðŸ’­"),Ot.forEach(s),this.h()},h(){st(O,"class","language-shell"),st(D,"class","language-shell"),st(H,"class","language-shell")},m(e,l){c(e,o,l),t(o,m),lt(u,o,null),t(o,b),t(o,d),t(d,E),t(o,S),c(e,te,l),c(e,M,l),t(M,_e),c(e,se,l),c(e,O,l),O.innerHTML=St,c(e,ae,l),c(e,$,l),t($,L),t(L,ve),t(L,j),t(j,ye),t(L,ke),t($,Ee),t($,C),t(C,ge),t(C,R),t(R,$e),t(C,we),t($,ze),t($,q),t(q,xe),c(e,ne,l),c(e,y,l),t(y,be),t(y,F),t(F,Oe),t(y,Le),t(y,U),t(U,Ce),t(y,De),t(y,B),t(B,He),t(y,Se),c(e,oe,l),c(e,f,l),t(f,Me),t(f,G),t(G,Pe),t(f,Ae),t(f,N),t(N,Ie),t(f,Te),t(f,W),t(W,Ze),t(f,je),t(f,X),t(X,Re),t(f,qe),t(f,J),t(J,Fe),t(f,Ue),c(e,le,l),c(e,P,l),t(P,Be),c(e,re,l),c(e,A,l),t(A,Ge),c(e,pe,l),c(e,D,l),D.innerHTML=Mt,c(e,ie,l),c(e,I,l),t(I,Ne),c(e,ce,l),c(e,h,l),t(h,We),lt(z,h,null),t(h,Xe),t(h,K),t(K,Je),t(h,Ke),t(h,Q),t(Q,Qe),t(h,Ve),t(h,V),t(V,Ye),t(h,et),c(e,me,l),c(e,H,l),H.innerHTML=Pt,c(e,de,l),c(e,T,l),t(T,tt),ue=!0},p(e,l){const Y={};l&2&&(Y.$$scope={dirty:l,ctx:e}),u.$set(Y);const ee={};l&2&&(ee.$$scope={dirty:l,ctx:e}),z.$set(ee)},i(e){ue||(rt(u.$$.fragment,e),rt(z.$$.fragment,e),ue=!0)},o(e){pt(u.$$.fragment,e),pt(z.$$.fragment,e),ue=!1},d(e){e&&s(o),it(u),e&&s(te),e&&s(M),e&&s(se),e&&s(O),e&&s(ae),e&&s($),e&&s(ne),e&&s(y),e&&s(oe),e&&s(f),e&&s(le),e&&s(P),e&&s(re),e&&s(A),e&&s(pe),e&&s(D),e&&s(ie),e&&s(I),e&&s(ce),e&&s(h),it(z),e&&s(me),e&&s(H),e&&s(de),e&&s(T)}}}function Nt(g){let o,m;const u=[g[0],Ht];let b={$$slots:{default:[Gt]},$$scope:{ctx:g}};for(let d=0;d<u.length;d+=1)b=at(b,u[d]);return o=new Ft({props:b}),{c(){nt(o.$$.fragment)},l(d){ot(o.$$.fragment,d)},m(d,E){lt(o,d,E),m=!0},p(d,[E]){const S=E&1?qt(u,[E&1&&Lt(d[0]),E&0&&Lt(Ht)]):{};E&2&&(S.$$scope={dirty:E,ctx:d}),o.$set(S)},i(d){m||(rt(o.$$.fragment,d),m=!0)},o(d){pt(o.$$.fragment,d),m=!1},d(d){it(o,d)}}}const Ht={title:"Improving Oh My Zsh Startup Time with Lazy Loading",date:"2023-03-23T00:00:00.000Z",tags:["DX","Code Snippet"]};function Wt(g,o,m){return g.$$set=u=>{m(0,o=at(at({},o),Ct(u)))},o=Ct(o),[o]}class Qt extends Zt{constructor(o){super(),jt(this,o,Wt,Nt,Rt,{})}}export{Qt as default,Ht as metadata};
